#!/bin/bash
# last tested on FreeBSD 13.1 on 01 Aug 2022
# to be run as root...
# without bash no access to "WRPASS=`echo ${WRPASS//[^[:word:]]/}`"
# bash is not yet available?
#	"pkg install bash"

PSQ="14"
PY="39"

# net/py-pyzmq: because pip won't build pyzmq inside the venv
# pkg install sudo python3 postgresql12-server-12.1 postgresql12-client-12.1 postgresql12-contrib-12.1 git-lite net/py-pyzmq
# pkg install sudo python3 postgresql13-server postgresql13-client postgresql13-contrib git-lite net/py-pyzmq go
pkg install sudo wget python3 postgresql${PSQ}-server postgresql${PSQ}-client postgresql${PSQ}-contrib git-lite net/py-pyzmq go

# scipy, etc cannot be installed via pip
pkg install py${PY}-scipy py${PY}-gensim py${PY}-scikit-learn

# jailed?
# echo 'security.jail.sysvipc_allowed=1' >> /etc/sysctl.conf
# echo 'jail_sysvipc_allow="YES"' >> /etc/rc.conf

# in /usr/local/etc/ezjail/JAILNAME, update:
# export jail_JAILNAME_parameters="allow.sysvipc=1"

# restart jail
# ezjail-admin restart JAILNAME

echo postgresql_enable="YES" >> /etc/rc.conf
# next fails in a jail unless you do the "jailed?" stuff
/usr/local/etc/rc.d/postgresql initdb
/usr/local/etc/rc.d/postgresql start

SSL="/usr/bin/openssl"
WRPASS=`${SSL} rand -base64 12`
RDPASS=`${SSL} rand -base64 12`
SKRKEY=`${SSL} rand -base64 24`
RUPASS=`${SSL} rand -base64 24`
# you might have regex control chars in there if you are not lucky: 'VvIUkQ9CerGTo/sx5vneHeo+PCKpx7V5'
WRPASS=`echo ${WRPASS//[^[:word:]]/}`
RDPASS=`echo ${RDPASS//[^[:word:]]/}`
SKRKEY=`echo ${SKRKEY//[^[:word:]]/}`
RUPASS=`echo ${RUPASS//[^[:word:]]/}`

HUSER="hipparchia"

pw useradd -m -d /home/hipparchia -c "Hipparchia" -s /bin/tcsh -n $HUSER

HIPPHOME="/home/$HUSER/hipparchia_venv"
SERVERPATH="$HIPPHOME/HipparchiaServer"
BUILDERPATH="$HIPPHOME/HipparchiaBuilder"
LOADERPATH="$HIPPHOME/HipparchiaSQLoader"
NIXPATH="$HIPPHOME/HipparchiaNIX"
MACPATH="$HIPPHOME/HipparchiaMacOS"
DATAPATH="$HIPPHOME/HipparchiaData"
THIRDPARTYPATH="$HIPPHOME/HipparchiaThirdPartySoftware"
EXTRAFONTPATH="$HIPPHOME/HipparchiaExtraFonts"
WINDOWSPATH="$HIPPHOME/HipparchiaWindows"
LEXDATAPATH="$HIPPHOME/HipparchiaLexicalData"
STATIC="$SERVERPATH/server/static"
TTF="$STATIC/ttf"
THEDB="hipparchiaDB"
CONFIGFILE="$SERVERPATH/server/settings/securitysettings.py"
HBACONF="/var/db/postgres/data${PSQ}/pg_hba.conf"
GIT="sudo -u ${HUSER} git"

sudo -u $HUSER python3 -m venv $HIPPHOME
sudo -u $HUSER $HIPPHOME/bin/python3 -m pip install --upgrade pip
sudo -u $HUSER $HIPPHOME/bin/pip3 install flask websockets flask_wtf flask_login
# psycopg2 has problems doing streamcopy in later editions
# $HIPPHOME/bin/pip3 install psycopg2==2.8.5
$HIPPHOME/bin/pip3 install psycopg2

cd $HIPPHOME
$GIT clone https://github.com/e-gun/HipparchiaServer.git
$GIT clone https://github.com/e-gun/HipparchiaBuilder
$GIT clone https://github.com/e-gun/HipparchiaSQLoader
$GIT clone https://github.com/e-gun/HipparchiaNIX
# $GIT clone https://github.com/e-gun/HipparchiaMacOS
$GIT clone https://github.com/e-gun/HipparchiaThirdPartySoftware
# $GIT clone https://github.com/e-gun/HipparchiaExtraFonts
# $GIT clone https://github.com/e-gun/HipparchiaWindows
$GIT clone --depth 1 https://github.com/e-gun/HipparchiaLexicalData

# ? pip install pg-stream-copy ?

# matplotlib==3.2.0 briefly broke networkx
# sudo -u $HUSER $HIPPHOME/bin/pip3 install matplotlib==3.1.3

# vectors effectively unusable on FreeBSD ATM since these modules will not build without building scipy and they do not have packages...

# sudo -u $HUSER $HIPPHOME/bin/pip3 install matplotlib
# sudo -u $HUSER $HIPPHOME/bin/pip3 install cython numpy pyLDAvis networkx umap-learn

sed "s/DBPASS = >>yourpasshere<</DBPASS = $WRPASS/" $BUILDERPATH/sample_config.ini > $BUILDERPATH/config.ini
sed "s/DBPASS = yourpasshere/DBPASS = $WRPASS/" $LOADERPATH/sample_config.ini > $LOADERPATH/config.ini

sudo -u $HUSER cp -rp $SERVERPATH/server/sample_settings $SERVERPATH/server/settings
sed -i "" "s/DBPASS = 'yourpassheretrytomakeitstrongplease'/DBPASS = '$RDPASS'/" $CONFIGFILE
sed -i "" "s/SECRET_KEY = 'yourkeyhereitshouldbelongandlooklikecryptographicgobbledygook'/SECRET_KEY = '$SKRKEY'/" $CONFIGFILE
sed -i "" "s/WRITEUSER = 'consider_re-using_HipparchiaBuilder_user'/WRITEUSER = 'hippa_wr'/" $CONFIGFILE
sed -i "" "s/DBWRITEPASS = 'consider_re-using_HipparchiaBuilder_pass'/DBWRITEPASS = '$WRPASS'/" $CONFIGFILE
sed -i "" "s/DEFAULTREMOTEPASS = 'yourremoteuserpassheretrytomakeitstrongplease'/DEFAULTREMOTEPASS = '$RUPASS'/" $CONFIGFILE

sudo -u postgres createdb -E UTF8 $THEDB
cp $BUILDERPATH/builder/sql/generate_hipparchia_dbs.sql /tmp
sudo -u postgres psql -d $THEDB -a -f /tmp/generate_hipparchia_dbs.sql
rm /tmp/generate_hipparchia_dbs.sql
sudo -u postgres psql -d $THEDB --command="ALTER ROLE hippa_wr WITH PASSWORD '$WRPASS';"
sudo -u postgres psql -d $THEDB --command="ALTER ROLE hippa_rd WITH PASSWORD '$RDPASS';"

# note that if you are in a jail you might want 127.0.1.1/32 (vel sim.) here)
echo "host   $THEDB   hippa_rd,hippa_wr   127.0.0.1/32   password" >>  $HBACONF
echo "local   $THEDB   hippa_rd,hippa_wr   password" >>  $HBACONF
/usr/local/etc/rc.d/postgresql restart

unzip -o $THIRDPARTYPATH/minimal_installation/NotoBaseFonts.zip -d $TTF/
mv $TTF/NotoBaseFonts/*ttf $TTF/
rm -rf $TTF/NotoBaseFonts/
rm -rf $TTF/__MACOSX/

cd $STATIC/
cp $THIRDPARTYPATH/minimal_installation/jquery-3.5.1.min.js $STATIC/jquery.min.js
cp $THIRDPARTYPATH/minimal_installation/jquery-ui-*.zip $STATIC/
cp $THIRDPARTYPATH/minimal_installation/js.cookie.js $STATIC/
cp $THIRDPARTYPATH/vector_helpers/*.* $STATIC/
ZIPLIST=$(ls -1 $STATIC/*.zip)
for Z in $ZIPLIST; do unzip -o $Z; done
rm $STATIC/*zip
rm $STATIC/*md
rm $STATIC/LICENSE
rm $STATIC/d3.js
mv $STATIC/d3.min.js $STATIC/jsd3.js
mv $STATIC/ldavis.v1.0.0.js $STATIC/jsforldavis.js
cp $STATIC/jquery-ui-*/j* $STATIC/
cp $STATIC/jquery-ui-*/images/*.png $STATIC/images/
rm -rf $STATIC/jquery-ui-*/

mkdir -p $DATAPATH/lexica/
cd $DATAPATH/lexica/
HLD="https://github.com/e-gun/HipparchiaLexicalData/raw/stable"
wget "${HLD}/logeion.lsj.xml.gz"
wget "${HLD}/latin-lexicon_1999.04.0059.xml.gz"
gunzip $DATAPATH/lexica/*.gz

cp $NIXPATH/selfupdate.sh $HIPPHOME
cp $NIXPATH/pipupgrade.sh $HIPPHOME

chown -R $HUSER $HIPPHOME

# echo hipparchia_server_enable="YES" >> /etc/rc.conf
# cp $NIXPATH/hipparchia_rc.txt /usr/usr/local/etc/rc.d/hipparchia
# chmod 555 /usr/usr/local/etc/rc.d/hipparchia
# sudo cp $NIXPATH/circusd /usr/local/etc/rc.d/circusd
# echo circusd_enable="YES" >> /etc/rc.conf

# nginx / gunicorn seems not to like the on-the-fly css substitutions...
sed "s/hipparchiastyles.css/notostyle.css/" $SERVERPATH/server/sample_settings/htmlandcssstylesettings.py > $SERVERPATH/server/settings/htmlandcssstylesettings.py


# cp $HIPPHOME/bin/circusd /usr/local/bin
# /usr/local/etc/rc.d/circusd start

# manual
# nohup /home/hipparchia/hipparchia_venv/bin/python3 /home/hipparchia/hipparchia_venv/HipparchiaServer/run.py > h_output.txt &

pkg install redis
echo redis_enable="YES" >> /etc/rc.conf
sudo -u $HUSER $HIPPHOME/bin/pip3 install redis

sudo -u $HUSER ln -s $HIPPHOME/HipparchiaServer/server/settings $HUSER/
cd /home/$HUSER
sudo -u $HUSER mkdir -p go/src/github.com/e-gun
cd /home/$HUSER/go/src/github.com/e-gun
sudo -u $HUSER git clone https://github.com/e-gun/HipparchiaGoDBHelper.git
# sudo -u $HUSER git clone https://github.com/e-gun/HipparchiaGoBinaries.git
cd HipparchiaGoDBHelper
sudo -u $HUSER go mod init
sudo -u $HUSER go mod tidy
sudo -u $HUSER ./cli_build_archive_install.sh

pkg install nginx
echo nginx_enable="YES" >> /etc/rc.conf
sudo -u $HUSER $HIPPHOME/bin/pip3 install gunicorn

# sudo -u  hipparchia /home/hipparchia/hipparchia_venv/bin/gunicorn --bind=unix:/tmp/gunicorn.sock -t 1200 --workers=1 server:hipparchia
# daemon -c -u hipparchia -R 10 /home/hipparchia/hipparchia_venv/bin/gunicorn --bind=unix:/tmp/gunicorn.sock -t 1200 --workers=1 --chdir /home/hipparchia/hipparchia_venv/HipparchiaServer server:hipparchia
cp $NIXPATH/hipparchia_rc.sh /usr/local/etc/rc.d/hipparchia
chmod 755 /usr/local/etc/rc.d/hipparchia
echo hipparchia_enable="YES" >> /etc/rc.conf

cp $NIXPATH/freebsd_nginx_conf.txt $NIXPATH/local_nginx_conf.txt
CONFIGFILE="$NIXPATH/local_nginx_conf.txt"
# this might be wrong if you have the wrong humber of interfaces
MYIP=`ifconfig | grep "inet " | cut -f2 -d " " | head -n 1`
INTERNALPORT="5010"
sed -i "" "s/server EXTERNALINTERFACE:WEBSOCKETSERVEDPORT/server $MYIP:$INTERNALPORT/" $CONFIGFILE
cp $CONFIGFILE /usr/local/etc/nginx/nginx.conf

# should also adjust networksettings.py
# POLLCONNECTIONTYPE = 'redis'

# should also adjust helpersettings.py
# EXTERNALGRABBER = True
# EXTERNALWEBSOCKETS = True
