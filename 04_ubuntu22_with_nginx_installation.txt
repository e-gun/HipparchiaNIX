# this should get you a ubuntu19 or ubuntu20 installation; cut and paste of the whole will fail: "sudo apt install"
#   will break you out of the script; similarly you should make sure postgres gets installed properly; pause accordingly.
#   but you can do this in a couple of big chunks...
# script tested 25 jan 2021 on a clean install of Ubuntu 20.04.1
#   decent chance you will have to start postgres yourself: look for the red text that tells you how to do that
#   U21 has postgres 13; that changes a path that used to have '12' in it
# script tested 07 may 2021 on a clean install of Ubuntu 21.04

#!/bin/bash

MYHIPPARCHIAUSER="hipparchia"

sudo apt install python3-venv python3-dev build-essential unzip postgresql postgresql-contrib nginx redis golang-go
# if postgresql does not autostart you either follow the prompts or execute the next
# sudo systemctl start postgresql
# sudo systemctl enable postgresql

# nginx will 403 if it can't dive into ${HOME} which is 750 on a default Ubuntu 21.04
chmod a+x ${HOME}
HIPPHOME="$HOME/hipparchia_venv"
SERVERPATH="$HIPPHOME/HipparchiaServer"
BUILDERPATH="$HIPPHOME/HipparchiaBuilder"
LOADERPATH="$HIPPHOME/HipparchiaSQLoader"
NIXPATH="$HIPPHOME/HipparchiaNIX"
MACPATH="$HIPPHOME/HipparchiaMacOS"
DATAPATH="$HIPPHOME/HipparchiaData"
THIRDPARTYPATH="$HIPPHOME/HipparchiaThirdPartySoftware"
EXTRAFONTPATH="$HIPPHOME/HipparchiaExtraFonts"
WINDOWSPATH="$HIPPHOME/HipparchiaWindows"
LEXDATAPATH="$HIPPHOME/HipparchiaLexicalData"
STATIC="$SERVERPATH/server/static"
TTF="$STATIC/ttf"
THEDB="hipparchiaDB"
CONFIGFILE="$SERVERPATH/server/settings/securitysettings.py"
HBACONF='/etc/postgresql/14/main/pg_hba.conf'
# 13: ubuntu 21.04
# HBACONF='/etc/postgresql/12/main/pg_hba.conf'
# ubuntu 20.04 has psql12; 19.10 had psql11
# HBACONF='/etc/postgresql/11/main/pg_hba.conf'
GIT='git'
SSL='openssl'

for dir in $HIPPHOME $SERVERPATH $BUILDERPATH $LOADERPATH $NIXPATH $DATAPATH $MACPATH $WINDOWSPATH $EXTRAFONTPATH $THIRDPARTYPATH $LEXDATAPATH; do /bin/mkdir $dir; done

$GIT clone https://github.com/e-gun/HipparchiaBuilder
$GIT clone https://github.com/e-gun/HipparchiaSQLoader
$GIT clone https://github.com/e-gun/HipparchiaNIX
# $GIT clone https://github.com/e-gun/HipparchiaMacOS
$GIT clone https://github.com/e-gun/HipparchiaThirdPartySoftware
# $GIT clone https://github.com/e-gun/HipparchiaExtraFonts
# $GIT clone https://github.com/e-gun/HipparchiaWindows
$GIT clone --depth 1 https://github.com/e-gun/HipparchiaLexicalData

python3 -m venv $HIPPHOME
source $HIPPHOME/bin/activate

$HIPPHOME/bin/pip3 install flask websockets flask_wtf flask_login
$HIPPHOME/bin/pip3 install gunicorn redis
# matplotlib==3.2.0 briefly broke networkx
# $HIPPHOME/bin/pip3 install matplotlib==3.1.3
$HIPPHOME/bin/pip3 install matplotlib
$HIPPHOME/bin/pip3 install cython scipy numpy gensim pyLDAvis networkx scikit-learn umap-learn

# psycopg2 has problems doing streamcopy in later editions
# $HIPPHOME/bin/pip3 install psycopg2==2.8.5
# might also need...
# sudo apt install -y build-essential libpq-dev
$HIPPHOME/bin/pip3 install psycopg2

sudo -u postgres createdb -E UTF8 $THEDB
cp $BUILDERPATH/builder/sql/generate_hipparchia_dbs.sql /tmp

WRPASS=`${SSL} rand -base64 12`
RDPASS=`${SSL} rand -base64 12`
SKRKEY=`${SSL} rand -base64 24`
RUPASS=`${SSL} rand -base64 24`

WRPASS=`echo ${WRPASS//[^[:word:]]/}`
RDPASS=`echo ${RDPASS//[^[:word:]]/}`
SKRKEY=`echo ${SKRKEY//[^[:word:]]/}`
RUPASS=`echo ${RUPASS//[^[:word:]]/}`

sed "s/DBPASS = >>yourpasshere<</DBPASS = $WRPASS/" $BUILDERPATH/sample_config.ini > $BUILDERPATH/config.ini
sed "s/DBPASS = yourpasshere/DBPASS = $WRPASS/" $LOADERPATH/sample_config.ini > $LOADERPATH/config.ini

cp -rp $SERVERPATH/server/sample_settings $SERVERPATH/server/settings
sed -i "s/DBPASS = 'yourpassheretrytomakeitstrongplease'/DBPASS = '$RDPASS'/" $CONFIGFILE
sed -i "s/SECRET_KEY = 'yourkeyhereitshouldbelongandlooklikecryptographicgobbledygook'/SECRET_KEY = '$SKRKEY'/" $CONFIGFILE
sed -i "s/WRITEUSER = 'consider_re-using_HipparchiaBuilder_user'/WRITEUSER = 'hippa_wr'/" $CONFIGFILE
sed -i "s/DBWRITEPASS = 'consider_re-using_HipparchiaBuilder_pass'/DBWRITEPASS = '$WRPASS'/" $CONFIGFILE
sed -i "s/DEFAULTREMOTEPASS = 'yourremoteuserpassheretrytomakeitstrongplease'/DEFAULTREMOTEPASS = '$RUPASS'/" $CONFIGFILE

cd /tmp
sudo -u postgres psql -d $THEDB -a -f /tmp/generate_hipparchia_dbs.sql
rm /tmp/generate_hipparchia_dbs.sql
sudo -u postgres psql -d $THEDB --command="ALTER ROLE hippa_wr WITH PASSWORD '$WRPASS';"
sudo -u postgres psql -d $THEDB --command="ALTER ROLE hippa_rd WITH PASSWORD '$RDPASS';"
echo "local  $THEDB   hippa_rd,hippa_wr                  password" >>  /tmp/hbconf
echo "host   $THEDB   hippa_rd,hippa_wr   127.0.0.1/32   password" >>  /tmp/hbconf
sudo cat $HBACONF >> /tmp/hbconf
sudo cp /tmp/hbconf $HBACONF
sudo chown postgres $HBACONF
sudo chgrp postgres $HBACONF
sudo chmod 600 $HBACONF
sudo rm /tmp/hbconf
sudo systemctl restart postgresql


# FONTS
# cd $TTF/
# cp $THIRDPARTYPATH/minimal_installation/Noto*.zip $TTF/
#if [[ ${OPTION} != 'minimal' ]]; then
#  cp $EXTRAFONTPATH/*.ttf $TTF/
#  cp $EXTRAFONTPATH/*.zip $TTF/
#  CONFIGFILE="$SERVERPATH/server/settings/htmlandcssstylesettings.py"
#  sed -i "" "s/ENBALEFONTPICKER = 'no'/ENBALEFONTPICKER = 'yes'/" $CONFIGFILE
#fi

unzip -o $THIRDPARTYPATH/minimal_installation/NotoBaseFonts.zip -d $TTF/
mv $TTF/NotoBaseFonts/*ttf $TTF/
rm -rf $TTF/NotoBaseFonts/
rm -rf $TTF/__MACOSX/

#ZIPLIST=$(ls -1 $TTF/*.zip)
#for Z in $ZIPLIST; do unzip -o $Z; done

#DBLSUBDIRS=$(ls -d -1 $TTF/*/*/*.ttf)
#for D in $DBLSUBDIRS; do mv $D $TTF/; done
#
#INSUBDIRS=$(ls -d -1 $TTF/*/*.ttf)
#for F in $INSUBDIRS; do mv $F $TTF/; done

#SUBDIRS=$(ls -d -1 $TTF/*/)
#for S in $SUBDIRS; do rm -rf $S; done

# rm $TTF/*zip


# JS
cd $STATIC/
cp $THIRDPARTYPATH/minimal_installation/jquery-3.6.0.min.js $STATIC/jquery.min.js
cp $THIRDPARTYPATH/minimal_installation/jquery-ui-*.zip $STATIC/
cp $THIRDPARTYPATH/minimal_installation/js.cookie.js $STATIC/
cp $THIRDPARTYPATH/vector_helpers/*.* $STATIC/

ZIPLIST=$(ls -1 $STATIC/*.zip)
for Z in $ZIPLIST; do unzip -o $Z; done
rm $STATIC/*zip
rm $STATIC/*md
rm $STATIC/LICENSE
rm $STATIC/d3.js
mv $STATIC/d3.min.js $STATIC/jsd3.js
mv $STATIC/ldavis.v1.0.0.js $STATIC/jsforldavis.js
cp $STATIC/jquery-ui-*/j* $STATIC/
cp $STATIC/jquery-ui-*/images/*.png $STATIC/images/
rm -rf $STATIC/jquery-ui-*/

if [ ! -d "$DATAPATH/lexica" ]; then
  mkdir $DATAPATH/lexica/
  cd $DATAPATH/lexica/
  wget "https://github.com/e-gun/HipparchiaLexicalData/raw/stable/logeion.lsj.xml.gz"
  gunzip $DATAPATH/lexica/*.gz
fi

cp $NIXPATH/selfupdate.sh $HIPPHOME
cp $NIXPATH/pipupgrade.sh $HIPPHOME

# NOT USING THIS ANY LONGER....
# sudo cp $NIXPATH/hipparchia.service /etc/systemd/system/
# sudo systemctl enable hipparchia
# sudo systemctl start hipparchia

CONFIGFILE="$SERVERPATH/server/settings/securitysettings.py"
sed -i "s/LIMITACCESSTOLOGGEDINUSERS = False/LIMITACCESSTOLOGGEDINUSERS = True" $CONFIGFILE
sed -i "s/SETADEFAULTUSER = False/SETADEFAULTUSER = True" $CONFIGFILE

CONFIGFILE="$SERVERPATH/server/settings/networksettings.py"
sed -i "s/POLLCONNECTIONTYPE = 'notredis'/POLLCONNECTIONTYPE = 'redis'/" $CONFIGFILE
sed -i "s/EXTERNALWSGI = False/EXTERNALWSGI = True/" $CONFIGFILE

# the accuracy of the next depends on how many interfaces you are using...
MYIP=`ip addr | grep "inet " | cut -f6 -d " " | cut -f1 -d / | tail -1`

sed -i "s/LISTENINGADDRESS = '127.0.0.1'/LISTENINGADDRESS = '$MYIP'/" $CONFIGFILE
sed -i "s/MYEXTERNALIPADDRESS = '127.0.0.1'/MYEXTERNALIPADDRESS = '$MYIP'/" $CONFIGFILE

cp $NIXPATH/nginx_conf.txt $NIXPATH/local_nginx_conf.txt
CONFIGFILE="$NIXPATH/local_nginx_conf.txt"
EXTERNALPORT="5011"
INTERNALPORT="5010"
sed -i "s/server EXTERNALINTERFACE:WEBSOCKETSERVEDPORT/server $MYIP:$INTERNALPORT/" $CONFIGFILE
sed -i "s/listen WEBSOCKETLISTENPORT/listen $EXTERNALPORT/" $CONFIGFILE
sudo cp $NIXPATH/local_nginx_conf.txt /etc/nginx/nginx.conf
sudo cp $NIXPATH/sites-available_hipparchia.txt /etc/nginx/sites-available/hipparchia
sudo rm /etc/nginx/sites-enabled/default
sudo ln -s /etc/nginx/sites-available/hipparchia /etc/nginx/sites-enabled/hipparchia
sudo service nginx reload

# NGINX won't do the substitutions in the standard CSS file right; use the hard-coded version
sed "s/hipparchiastyles.css/notostyle.css/" $SERVERPATH/server/sample_settings/htmlandcssstylesettings.py > $SERVERPATH/server/settings/htmlandcssstylesettings.py

CONFIGFILE="/etc/systemd/system/gunicorn.service"
sudo cp $NIXPATH/gunicorn.service $CONFIGFILE
sudo sed -i "s/USERNAME/$MYHIPPARCHIAUSER/" $CONFIGFILE
sudo systemctl enable gunicorn
sudo systemctl start gunicorn

cat $NIXPATH/bashrc_supplement.txt >> ~/.bashrc

mkdir ~/go
mkdir ~/go/src
mkdir ~/go/src/github.com
mkdir ~/go/src/github.com/e-gun
cd ~/go/src/github.com/e-gun
$GIT clone https://github.com/e-gun/HipparchiaGoDBHelper.git
$GIT clone https://github.com/e-gun/HipparchiaGoBinaries.git
echo "export GOPATH=$HOME/go" >> ~/.bashrc
export PATH=$PATH:$GOPATH/bin >> ~/.bashrc
echo "alias hgo='cd ~/go/src/github.com/e-gun'" >> ~/.bashrc
cd ~/go/src/github.com/e-gun/HipparchiaGoDBHelper
go mod init
go mod tidy
./cli_build_archive_install.sh
cd ~

# also consider...
# sudo apt purge snapd
# sudo apt autoremove --purge
